{"version":3,"sources":["Contexts.tsx","data/FileBase.ts","data/BufferReader.ts","data/FileCon.ts","data/FileB800.ts","data/FileDat.ts","data/FileArt.ts","data/FileVoc.ts","data/FileMid.ts","Constants.ts","maprenderer/2d/Map2dRenderer.ts","data/FileMap.ts","Services.ts","maprenderer/Texture.ts","data/GrpProcessor.ts","ui/DataRenderer.tsx","maprenderer/3d/Map3dRenderer.ts","maprenderer/MapRenderer.ts","ui/MapViewControls.tsx","ui/Content.tsx","ui/DropZone.tsx","ui/Header.tsx","ui/SideBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingState","LoadingContext","React","createContext","undefined","useLoadingContext","useContext","LoadingProvider","children","useState","Init","loadingState","setLoadingState","Provider","value","FileContext","useFileContext","FileProvider","name","ext","file","setFile","FileBase","reader","size","initialOffset","BufferReader","buffer","offset","view","this","DataView","length","byteLength","Error","s","i","charCode","getUint8","String","fromCharCode","n","getUint32","getUint16","getInt32","getInt16","getInt8","subbuffer","slice","FileCon","data","readString","FileB800","chars","colors","r","c","char","color","readUint8","push","console","log","text","idx","FileDat","palette","shades","readLookup","readPalette","g","b","a","numpalookups","readUint16LE","shade","j","mapping","FileArt","tiles","readUint32LE","localtilestart","count","x","y","pixels","valid","tile","FileVoc","readBytes","FileMid","GLOBALSCALE","Point2","z","Map2dRenderer","canvas","map","processor","context","boundsMin","boundsMax","lineWidth","scale","position","initialized","isDown","mouseDownPosition","worldDownPosition","getContext","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","walls","forEach","w","Math","min","max","set","startX","startY","addEventListener","ev","onMouseDown","onMouseUp","onMouseMove","onMouseWheel","dt","setTransform","clearRect","width","height","fillStyle","fillRect","translate","renderWalls","renderPlayer","strokeStyle","beginPath","wall","next","point2","moveTo","lineTo","stroke","arc","PI","fill","e","deltaY","movex","movey","FileMap","rawData","globalScale","Map","readInt32LE","startZ","startAngle","readInt16LE","currentSector","sectorCount","sector","Sector","sectors","index","wallptr","wallnum","ceilingz","floorz","ceilingstat","floorstat","ceilingpicnum","ceilingheinum","ceilingshade","readInt8","ceilingpal","ceilingxpanning","ceilingypanning","floorpicnum","floorheinum","floorshade","floorpal","floorxpanning","floorypanning","visibility","filler","lotag","hitag","extra","fstat","Secstat","cstat","readType","wallCount","Wall","nextwall","nextsector","picnum","overpicnum","pal","xrepeat","yrepeat","xpanning","ypanning","stat","Wstat","spriteCount","sprite","Sprite","sprites","clipdist","xoffset","yoffset","sectnum","statnum","ang","owner","xvel","yvel","zvel","wall0","wall1","f","slopped","sloped","angle","fx","fy","grad","sqrt","t","keys","Object","v","grpProcessor","paralaxing","swapxy","dblsmooshiness","xflip","yflip","alignTexToFirstWall","blocking","bottomsOfInvisibleSwapped","alignPictureOnBottom","masking","oneWay","blockingWall2","transluscence","transluscenceReversing","Texture","texture","Uint8ClampedArray","counter","h","palindex","DataTexture","RGBAFormat","wrapS","RepeatWrapping","wrapT","tex","clone","repeatx","repeaty","repeat","needsUpdate","GrpProcessor","files","fileByName","allTexture","sig","fileCount","filename","filesize","toLowerCase","indexOf","substr","read","arts","getFiles","extension","found","get","id","error","getGrpProcessor","RenderTile","canvasRef","useRef","useEffect","imageData","ImageData","current","putImageData","className","ref","Art","base","getFile","b800color","getB800Element","colorData","bc","bgcolor","style","B800","lines","items","line","Con","whiteSpace","DownloadButton","type","elementRef","blob","Blob","href","window","URL","createObjectURL","download","Voc","Mid","synth","playing","onClick","stopMIDI","WebAudioTinySynth","loadMIDI","playMIDI","Vector3","d","planey","planex","v0","Vector2","v1","v2","v3","Map3dRenderer","camera","scene","renderer","useTexture","defaultWallMaterial","defaultFloorMaterial","defaultCeilMaterial","orbitControls","root","Object3D","keydowns","clear","PerspectiveCamera","Scene","background","Color","add","updateMatrixWorld","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","OrbitControls","hemiLight","AmbientLight","dirLight","DirectionalLight","opacity","MeshLambertMaterial","transparent","document","onKeyDown","onKeyUp","forward","side","up","down","left","right","direction","getWorldDirection","multiplyScalar","target","transformDirection","matrixWorld","copy","sub","applyAxisAngle","update","render","aspect","updateProjectionMatrix","initialize","renderWall","renderFloorAndCeiling","vertices","p","wireGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","segments","LineSegments","LineBasicMaterial","getTexture","MeshBasicMaterial","nextSector","getSlopeZ","geometry","newQuad","mesh","Mesh","getWallMaterial","MathUtils","inverseLerp","DEG2RAD","saveState","_orbit","shape","Shape","w0","ceilGeometry","ShapeBufferGeometry","uv","getAttribute","p0","getX","getY","p1","normalize","sin","cos","newx","newy","setX","setY","floorGeometry","cpositions","setZ","fpositions","floorindex","getZ","floor","getFloorMaterial","ceiling","getCeilingMaterial","indices","uvs","normals","dir1","dir2","normal","crossVectors","dir1l","dir1l2","setIndex","key","MapRenderer","destroyed","resizeObserver","renderer2d","renderer3d","canvas2dActive","oldTime","unobserve","content","canvass","getElementsByTagName","canvas3d","item","canvas2d","onresize","ResizeObserver","entries","observe","setCanvas2dVisible","now","getBoundingClientRect","resizeCanvas","resize","requestAnimationFrame","ellapsed","visible","display","switchTexturing","performance","Date","MapViewControls","mapRenderer","fileMap","rootRef","link2d3d","linkTexturing","is2dActive","isTextureActive","useLayoutEffect","loadFull","destroy","innerText","switch2d3d","Content","DropZone","stopEvent","preventDefault","stopPropagation","handleFiles","Loading","arrayBuffer","then","Loaded","onDragEnter","currentTarget","classList","onDragOver","onDragLeave","remove","onDrop","dataTransfer","onDragDrop","accept","onChange","htmlFor","Header","loadGrp","fetch","process","response","grp","finally","Section","isOpen","setIsOpen","Sidebar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70974089.chunk.js","sourcesContent":["import React, { PropsWithChildren } from \"react\";\r\n\r\n\r\nexport enum LoadingState {\r\n    Init, Loading, Loaded\r\n}\r\n\r\nexport type LoadingContextType = {\r\n    loadingState: LoadingState;\r\n    setLoadingState: (value: LoadingState) => void;\r\n};\r\n\r\nconst LoadingContext = React.createContext<LoadingContextType>(undefined);\r\nexport const useLoadingContext = () => React.useContext(LoadingContext);\r\nexport const LoadingProvider = ({ children }: PropsWithChildren<any>) => {\r\n    const [loadingState, setLoadingState] = React.useState(LoadingState.Init);\r\n    return <LoadingContext.Provider value={{ loadingState, setLoadingState }}>\r\n        {children}\r\n    </LoadingContext.Provider>\r\n}\r\n\r\n\r\nexport type FileContextType = {\r\n    file: {\r\n        name: string,\r\n        ext: string\r\n    }\r\n    setFile: (file: { name: string, ext: string }) => void;\r\n};\r\n\r\nconst FileContext = React.createContext<FileContextType>(undefined);\r\nexport const useFileContext = () => React.useContext(FileContext);\r\nexport const FileProvider = ({ children }: PropsWithChildren<any>) => {\r\n    const [file, setFile] = React.useState({ name: \"-none-\", ext: \"\" });\r\n    return <FileContext.Provider value={{ file, setFile }}>\r\n        {children}\r\n    </FileContext.Provider>\r\n}\r\n\r\n\r\n","import { BufferReader } from \"./BufferReader\";\r\n\r\nexport class FileBase {\r\n\r\n    constructor(protected reader: BufferReader, public name: string, public size: number, protected initialOffset: number) {\r\n    }\r\n\r\n    read() {\r\n    }\r\n\r\n}","export class BufferReader {\r\n\r\n    offset: number = 0;\r\n    view: DataView;\r\n\r\n    constructor(private buffer: ArrayBuffer) {\r\n        this.view = new DataView(buffer);\r\n    }\r\n\r\n    readString(length: number) {\r\n        if (this.offset + length > this.view.byteLength) throw Error(\"not enough byte remaining\");\r\n\r\n        let s = \"\";\r\n        for (let i = 0; i < length; i++) {\r\n            let charCode = this.view.getUint8(this.offset + i);\r\n            s += String.fromCharCode(charCode);\r\n        }\r\n\r\n        this.offset += length;\r\n        return s;\r\n    }\r\n\r\n    readUint32LE() {\r\n        let n = this.view.getUint32(this.offset, true);\r\n        this.offset += 4;\r\n        return n;\r\n    }\r\n    readUint16LE() {\r\n        let n = this.view.getUint16(this.offset, true);\r\n        this.offset += 2;\r\n        return n;\r\n    }\r\n\r\n    readInt32LE() {\r\n        let n = this.view.getInt32(this.offset, true);\r\n        this.offset += 4;\r\n        return n;\r\n    }\r\n    readInt16LE() {\r\n        let n = this.view.getInt16(this.offset, true);\r\n        this.offset += 2;\r\n        return n;\r\n    }\r\n\r\n    readInt8() {\r\n        let n = this.view.getInt8(this.offset);\r\n        this.offset += 1;\r\n        return n;\r\n    }\r\n    readUint8() {\r\n        let n = this.view.getUint8(this.offset);\r\n        this.offset += 1;\r\n        return n;\r\n    }\r\n\r\n    readBytes(length: number) {\r\n        let subbuffer = this.buffer.slice(this.offset, this.offset + length);\r\n        this.offset += length;\r\n        return subbuffer;\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\n\r\nexport class FileCon extends FileBase {\r\n\r\n    data: string;\r\n\r\n    read() {\r\n        this.reader.offset = this.initialOffset;\r\n        this.data = this.reader.readString(this.size);\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\n\r\nexport class FileB800 extends FileBase {\r\n\r\n    chars: Array<string> = [];\r\n    colors: Array<number> = [];\r\n\r\n    read() {\r\n        if (this.size !== 4000) {\r\n            console.log(this.name + \" doesn't seems to be a valid b800 file.\");\r\n            return;\r\n        }\r\n\r\n        this.reader.offset = this.initialOffset;\r\n\r\n        for (let r = 0; r < 25; r++) {\r\n            for (let c = 0; c < 80; c++) {\r\n                let char = this.reader.readString(1);\r\n                let color = this.reader.readUint8();\r\n                this.chars.push(char);\r\n                this.colors.push(color);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    print() {\r\n        for (let r = 0; r < 25; r++) {\r\n            let text = \"\";\r\n            for (let c = 0; c < 80; c++) {\r\n                let idx = r * 80 + c;\r\n                let char = this.chars[idx];\r\n                text += char;\r\n            }\r\n            console.log(text);\r\n        }\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\nimport { Color } from \"./Types\";\r\n\r\nexport class FileDat extends FileBase {\r\n\r\n    palette: Array<Color> = [];\r\n    shades: Array<Array<Color>> = [];\r\n\r\n    read() {\r\n        this.reader.offset = this.initialOffset;\r\n\r\n        if (this.name === \"lookup.dat\") this.readLookup();\r\n        else if (this.name === \"palette.dat\") this.readPalette();\r\n    }\r\n\r\n    private readPalette() {\r\n        for (let c = 0; c < 256; c++) {\r\n            let r = this.reader.readUint8() * 4;\r\n            let g = this.reader.readUint8() * 4;\r\n            let b = this.reader.readUint8() * 4;\r\n\r\n            let color = { r: r, g: g, b: b, a: 255 };\r\n            if (c === 255) color.a = 0;\r\n            this.palette.push(color);\r\n        }\r\n\r\n        let numpalookups = this.reader.readUint16LE();\r\n        for (let i = 0; i < numpalookups; i++) {\r\n            let shade: Array<Color> = [];\r\n            for (let j = 0; j < 256; j++) {\r\n                let mapping = this.reader.readUint8();\r\n                shade.push(this.palette[mapping]);\r\n            }\r\n            this.shades.push(shade);\r\n        }\r\n\r\n        // Transparency Data Table\r\n    }\r\n\r\n    private readLookup() {\r\n\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\nimport { Tile } from \"./Types\";\r\n\r\nexport class FileArt extends FileBase {\r\n\r\n    tiles: Array<Tile> = [];\r\n\r\n    read() {\r\n        this.reader.offset = this.initialOffset;\r\n\r\n        let version = this.reader.readUint32LE();\r\n        if (version !== 1) {\r\n            throw new Error(\"expecting version 1 for art files\");\r\n        }\r\n\r\n        this.reader.readUint32LE(); // numtiles\r\n        let localtilestart = this.reader.readUint32LE();\r\n        let localtileend = this.reader.readUint32LE();\r\n\r\n        let count = localtileend - localtilestart + 1;\r\n\r\n        for (let i = 0; i < count; i++) this.tiles.push({ x: 0, y: 0, pixels: [], valid: false });\r\n        for (let i = 0; i < count; i++) this.tiles[i].x = this.reader.readUint16LE();\r\n        for (let i = 0; i < count; i++) this.tiles[i].y = this.reader.readUint16LE();\r\n        for (let i = 0; i < count; i++) {\r\n            // picanm\r\n            this.reader.readUint32LE();\r\n        }\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            // read pixels\r\n            let tile = this.tiles[i];\r\n            let pixels = tile.x * tile.y;\r\n            if (pixels > 0) {\r\n                for (let c = 0; c < pixels; c++) {\r\n                    tile.pixels.push(this.reader.readUint8());\r\n                }\r\n                tile.valid = true;\r\n            }\r\n        }\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\n\r\nexport class FileVoc extends FileBase {\r\n\r\n    data: ArrayBuffer;\r\n\r\n    read() {\r\n        this.reader.offset = this.initialOffset;\r\n        this.data = this.reader.readBytes(this.size);\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\n\r\nexport class FileMid extends FileBase {\r\n\r\n    data: ArrayBuffer;\r\n\r\n    read() {\r\n        this.reader.offset = this.initialOffset;\r\n        this.data = this.reader.readBytes(this.size);\r\n    }\r\n}","\r\n\r\nexport const GLOBALSCALE = 1 / 1024;","import { Map } from \"../../data/FileMap\";\r\nimport { GrpProcessor } from \"../../data/GrpProcessor\";\r\n\r\nexport class Point2 {\r\n    constructor(public x = 0, public y = 0, public z = 0) { }\r\n\r\n    set(x: number, y: number, z?: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        if (z != null) this.z = z;\r\n    }\r\n}\r\n\r\n\r\nexport class Map2dRenderer {\r\n\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    private boundsMin: Point2;\r\n    private boundsMax: Point2;\r\n\r\n    private lineWidth = 1;\r\n    private scale = 1;\r\n    private position = new Point2();\r\n    private initialized = false;\r\n\r\n    constructor(private canvas: HTMLCanvasElement,private map: Map,private processor: GrpProcessor) {\r\n    }\r\n\r\n    initialize() {\r\n        if(this.initialized) return;\r\n\r\n        this.initialized=true;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n\r\n\r\n        this.boundsMin = new Point2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\r\n        this.boundsMax = new Point2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\r\n        this.map.walls.forEach(w => {\r\n            this.boundsMin.x = Math.min(this.boundsMin.x, w.x);\r\n            this.boundsMin.y = Math.min(this.boundsMin.y, w.y);\r\n            this.boundsMax.x = Math.max(this.boundsMax.x, w.x);\r\n            this.boundsMax.y = Math.max(this.boundsMax.y, w.y);\r\n        });\r\n\r\n        let size = this.boundsMax.x - this.boundsMin.x;\r\n        this.scale = 1000 / size;\r\n        this.position.set(this.map.startX, this.map.startY);\r\n\r\n        this.canvas.addEventListener(\"mousedown\", (ev: MouseEvent) => this.onMouseDown(ev));\r\n        this.canvas.addEventListener(\"mouseup\", (ev: MouseEvent) => this.onMouseUp(ev));\r\n        this.canvas.addEventListener(\"mousemove\", (ev: MouseEvent) => this.onMouseMove(ev));\r\n        this.canvas.addEventListener(\"wheel\", (ev: WheelEvent) => this.onMouseWheel(ev));\r\n    }\r\n\r\n    render(dt: number) {\r\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        this.context.fillStyle = \"#f2f6fc\";\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // center canvas\r\n        this.context.translate(this.canvas.width / 2, this.canvas.height / 2);\r\n\r\n        // move to position and apply zoom\r\n        this.context.translate(-this.position.x * this.scale, -this.position.y * this.scale);\r\n        this.context.scale(this.scale, this.scale);\r\n\r\n        // this.context.setTransform(this.scale, 0, 0, this.scale, -this.position.x, -this.position.y);\r\n\r\n        this.renderWalls();\r\n        this.renderPlayer();\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    private renderWalls() {\r\n        this.context.lineWidth = this.lineWidth / this.scale;\r\n        this.context.strokeStyle = \"#06005c\";\r\n\r\n        this.context.beginPath();\r\n        for (let i = 0; i < this.map.walls.length; i++) {\r\n            let wall = this.map.walls[i];\r\n            let next = this.map.walls[wall.point2];\r\n            this.context.moveTo(wall.x, wall.y);\r\n            this.context.lineTo(next.x, next.y);\r\n        }\r\n        this.context.stroke();\r\n    }\r\n\r\n    private renderPlayer() {\r\n        this.context.fillStyle = \"#e800c1\";\r\n        this.context.beginPath();\r\n        // this.context.arc(this.position.x, this.position.y, 500, 0, 2 * Math.PI);\r\n        this.context.arc(this.map.startX, this.map.startY, 1, 0, 2 * Math.PI);\r\n        this.context.fill();\r\n    }\r\n\r\n    private isDown = false;\r\n    private mouseDownPosition = new Point2();\r\n    private worldDownPosition = new Point2();\r\n\r\n    private onMouseWheel(e: WheelEvent) {\r\n        if (e.deltaY < 0) this.scale *= 1.2;\r\n        else if (e.deltaY > 0) this.scale *= 0.8;\r\n    }\r\n    private onMouseDown(e: MouseEvent) {\r\n        this.isDown = true;\r\n        this.mouseDownPosition.set(e.x, e.y);\r\n        this.worldDownPosition.set(this.position.x, this.position.y);\r\n    }\r\n    private onMouseUp(e: MouseEvent) {\r\n        this.isDown = false;\r\n    }\r\n    private onMouseMove(e: MouseEvent) {\r\n        if (!this.isDown) return;\r\n\r\n        let movex = e.x - this.mouseDownPosition.x;\r\n        let movey = e.y - this.mouseDownPosition.y;\r\n\r\n        this.position.set(this.worldDownPosition.x, this.worldDownPosition.y);\r\n        this.position.x -= movex / this.scale;\r\n        this.position.y -= movey / this.scale;\r\n    }\r\n}","import { GLOBALSCALE } from \"../Constants\";\r\nimport { Point2 } from \"../maprenderer/2d/Map2dRenderer\";\r\nimport { BufferReader } from \"./BufferReader\";\r\nimport { FileBase } from \"./FileBase\";\r\n\r\nexport class FileMap extends FileBase {\r\n\r\n    rawData: ArrayBuffer;\r\n\r\n    map: Map;\r\n    globalScale = GLOBALSCALE;\r\n\r\n    read() {\r\n        this.reader.offset = this.initialOffset;\r\n        this.rawData = this.reader.readBytes(this.size);\r\n    }\r\n\r\n    loadFull() {\r\n        let r = new BufferReader(this.rawData)\r\n\r\n        let v = r.readUint32LE(); // version\r\n        if (v !== 7) {\r\n            throw new Error(\"expecting map version to be 7\");\r\n        }\r\n\r\n        this.map = new Map();\r\n        this.map.startX = r.readInt32LE() * this.globalScale;\r\n        this.map.startY = r.readInt32LE() * this.globalScale;\r\n        this.map.startZ = -(r.readInt32LE() >> 4) * this.globalScale;\r\n        this.map.startAngle = r.readInt16LE();\r\n        this.map.currentSector = r.readInt16LE();\r\n\r\n\r\n        let sectorCount = r.readUint16LE();\r\n        for (let i = 0; i < sectorCount; i++) {\r\n            let sector = new Sector();\r\n            this.map.sectors.push(sector);\r\n\r\n            sector.index = i;\r\n            sector.wallptr = r.readInt16LE();\r\n            sector.wallnum = r.readInt16LE();\r\n            sector.ceilingz = -(r.readInt32LE() >> 4) * this.globalScale; //Note: Z coordinates are all shifted up 4\r\n            sector.floorz = -(r.readInt32LE() >> 4) * this.globalScale; //Note: Z coordinates are all shifted up 4\r\n            sector.ceilingstat = r.readInt16LE();\r\n            sector.floorstat = r.readInt16LE();\r\n            sector.ceilingpicnum = r.readInt16LE();\r\n            sector.ceilingheinum = -r.readInt16LE();\r\n            sector.ceilingshade = r.readInt8();\r\n            sector.ceilingpal = r.readUint8();\r\n            sector.ceilingxpanning = r.readUint8();\r\n            sector.ceilingypanning = r.readUint8();\r\n            sector.floorpicnum = r.readInt16LE();\r\n            sector.floorheinum = -r.readInt16LE();\r\n            sector.floorshade = r.readInt8();\r\n            sector.floorpal = r.readUint8();\r\n            sector.floorxpanning = r.readUint8();\r\n            sector.floorypanning = r.readUint8();\r\n            sector.visibility = r.readUint8();\r\n            sector.filler = r.readUint8();\r\n            sector.lotag = r.readInt16LE();\r\n            sector.hitag = r.readInt16LE();\r\n            sector.extra = r.readInt16LE();\r\n\r\n            sector.fstat = new Secstat();\r\n            sector.cstat = new Secstat();\r\n            readType(sector.cstat, sector.ceilingstat);\r\n            readType(sector.fstat, sector.floorstat);\r\n        }\r\n\r\n        let wallCount = r.readUint16LE();\r\n        for (let i = 0; i < wallCount; i++) {\r\n            let wall = new Wall();\r\n            this.map.walls.push(wall);\r\n\r\n            wall.x = r.readInt32LE() * this.globalScale;\r\n            wall.y = r.readInt32LE() * this.globalScale;\r\n            wall.point2 = r.readInt16LE();\r\n            wall.nextwall = r.readInt16LE();\r\n            wall.nextsector = r.readInt16LE();\r\n            wall.cstat = r.readInt16LE();\r\n            wall.picnum = r.readInt16LE();\r\n            wall.overpicnum = r.readInt16LE();\r\n            wall.shade = r.readInt8();\r\n            wall.pal = r.readUint8();\r\n            wall.xrepeat = r.readUint8();\r\n            wall.yrepeat = r.readUint8();\r\n            wall.xpanning = r.readUint8();\r\n            wall.ypanning = r.readUint8();\r\n            wall.lotag = r.readInt16LE();\r\n            wall.hitag = r.readInt16LE();\r\n            wall.extra = r.readInt16LE();\r\n\r\n            wall.index = i;\r\n            wall.stat = new Wstat();\r\n            readType(wall.stat, wall.cstat);\r\n        }\r\n\r\n        let spriteCount = r.readUint16LE();\r\n        for (let i = 0; i < spriteCount; i++) {\r\n            let sprite = new Sprite();\r\n            this.map.sprites.push(sprite);\r\n\r\n            sprite.x = r.readInt32LE();\r\n            sprite.y = r.readInt32LE();\r\n            sprite.z = r.readInt32LE();\r\n            sprite.cstat = r.readInt16LE();\r\n            sprite.picnum = r.readInt16LE();\r\n            sprite.shade = r.readInt8();\r\n            sprite.pal = r.readUint8();\r\n            sprite.clipdist = r.readUint8();\r\n            sprite.filler = r.readUint8();\r\n            sprite.xrepeat = r.readUint8();\r\n            sprite.yrepeat = r.readUint8();\r\n            sprite.xoffset = r.readInt8();\r\n            sprite.yoffset = r.readInt8();\r\n            sprite.sectnum = r.readInt16LE();\r\n            sprite.statnum = r.readInt16LE();\r\n            sprite.ang = r.readInt16LE();\r\n            sprite.owner = r.readInt16LE();\r\n            sprite.xvel = r.readInt16LE();\r\n            sprite.yvel = r.readInt16LE();\r\n            sprite.zvel = r.readInt16LE();\r\n            sprite.lotag = r.readInt16LE();\r\n            sprite.hitag = r.readInt16LE();\r\n            sprite.extra = r.readInt16LE();\r\n        }\r\n\r\n\r\n        for (let j = 0; j < this.map.sectors.length; j++) {\r\n            let sector = this.map.sectors[j];\r\n\r\n            sector.z.push(sector.ceilingz);\r\n            sector.z.push(sector.floorz);\r\n\r\n            let wall0 = this.map.walls[sector.wallptr];\r\n            let wall1 = this.map.walls[wall0.point2];\r\n\r\n            for (let f = 0; f < 2; f++) {\r\n                let slopped = (f === 0 ? sector.cstat.sloped : sector.fstat.sloped);\r\n                let angle = (f === 0 ? sector.ceilingheinum : sector.floorheinum)\r\n                if (slopped) {\r\n                    angle /= 4096;\r\n                    let fx = wall1.y - wall0.y;\r\n                    let fy = wall0.x - wall1.x;\r\n                    let f = fx * fx + fy * fy;\r\n                    if (f > 0) {\r\n                        f = 1 / Math.sqrt(f);\r\n                        fx *= f;\r\n                        fy *= f;\r\n                        sector.grad.push(new Point2(fx * angle, fy * angle));\r\n                    } else {\r\n                        sector.grad.push(new Point2(0, 0));\r\n                        break;\r\n                    }\r\n                } else {\r\n                    sector.grad.push(new Point2(0, 0));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction readType(t: Wstat | Secstat, value: number) {\r\n    let keys = Object.keys(t);\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let v = (value >> i);\r\n        v = v & 1;\r\n        let key = keys[i];\r\n        (t as any)[key] = (v === 0 ? false : true);\r\n    }\r\n}\r\n\r\nexport class Map {\r\n\r\n    startX: number;\r\n    startY: number;\r\n    startZ: number;\r\n    startAngle: number;\r\n\r\n    currentSector: number;\r\n\r\n    sectors: Array<Sector> = [];\r\n    walls: Array<Wall> = [];\r\n    sprites: Array<Sprite> = [];\r\n\r\n}\r\n\r\nexport class Sector {\r\n    wallptr: number;\r\n    wallnum: number;\r\n    ceilingz: number;\r\n    floorz: number;\r\n    ceilingstat: number;\r\n    floorstat: number;\r\n    ceilingpicnum: number;\r\n    ceilingheinum: number;\r\n    ceilingshade: number;\r\n    ceilingpal: number;\r\n    ceilingxpanning: number;\r\n    ceilingypanning: number;\r\n    floorpicnum: number;\r\n    floorheinum: number;\r\n    floorshade: number;\r\n    floorpal: number;\r\n    floorxpanning: number;\r\n    floorypanning: number;\r\n    visibility: number;\r\n    filler: number;\r\n    lotag: number;\r\n    hitag: number;\r\n    extra: number;\r\n\r\n    cstat: Secstat;\r\n    fstat: Secstat;\r\n    index: number;\r\n\r\n    walls: Array<Wall> = [];\r\n\r\n    // o ceiling, 1 floor\r\n    z: Array<number> = [];\r\n    grad: Array<Point2> = [];\r\n}\r\n\r\nexport class Secstat {\r\n    paralaxing: boolean = false;\r\n    sloped: boolean = false;\r\n    swapxy: boolean = false;\r\n    dblsmooshiness: boolean = false;\r\n    xflip: boolean = false;\r\n    yflip: boolean = false;\r\n    alignTexToFirstWall: boolean = false;\r\n}\r\n\r\nexport class Wall {\r\n    x: number;\r\n    y: number;\r\n    point2: number;\r\n    nextwall: number;\r\n    nextsector: number;\r\n    cstat: number;\r\n    picnum: number;\r\n    overpicnum: number;\r\n    shade: number;\r\n    pal: number;\r\n    xrepeat: number;\r\n    yrepeat: number;\r\n    xpanning: number;\r\n    ypanning: number;\r\n    lotag: number;\r\n    hitag: number;\r\n    extra: number;\r\n\r\n    index: number;\r\n    stat: Wstat;\r\n}\r\n\r\nexport class Wstat {\r\n    blocking: boolean = false;\r\n    bottomsOfInvisibleSwapped: boolean = false;\r\n    alignPictureOnBottom: boolean = false;\r\n    xflip: boolean = false;\r\n    masking: boolean = false;\r\n    oneWay: boolean = false;\r\n    blockingWall2: boolean = false;\r\n    transluscence: boolean = false;\r\n    yflip: boolean = false;\r\n    transluscenceReversing: boolean = false;\r\n}\r\n\r\nexport class Sprite {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    cstat: number;\r\n    picnum: number;\r\n    shade: number;\r\n    pal: number;\r\n    clipdist: number;\r\n    filler: number;\r\n    xrepeat: number;\r\n    yrepeat: number;\r\n    xoffset: number;\r\n    yoffset: number;\r\n    sectnum: number;\r\n    statnum: number;\r\n    ang: number;\r\n    owner: number;\r\n    xvel: number;\r\n    yvel: number;\r\n    zvel: number;\r\n    lotag: number;\r\n    hitag: number;\r\n    extra: number;\r\n}","import { GrpProcessor } from \"./data/GrpProcessor\";\r\n\r\n\r\nlet grpProcessor: GrpProcessor;\r\n\r\nexport function initGrpProcessor(grp: ArrayBuffer) {\r\n    grpProcessor = new GrpProcessor();\r\n    grpProcessor.read(grp);\r\n    return grpProcessor;\r\n}\r\n\r\nexport function getGrpProcessor() {\r\n    return grpProcessor;\r\n}","import { FileDat } from \"../data/FileDat\";\r\nimport { DataTexture, RepeatWrapping, RGBAFormat } from \"three\";\r\nimport { Tile } from \"../data/Types\";\r\n\r\nexport class Texture {\r\n\r\n    private texture: DataTexture;\r\n\r\n    constructor(public tile: Tile, public palette: FileDat, public index: number) {\r\n    }\r\n\r\n\r\n    getTexture(xrepeat: number, yrepeat: number, xpanning = 0, ypanning = 0, xflip = false, yflip = false) {\r\n\r\n        if (this.texture == null) {\r\n            let pixels = new Uint8ClampedArray(this.tile.pixels.length * 4);\r\n            let counter = 0;\r\n            for (let h = 0; h < this.tile.y; h++) {\r\n                for (let w = 0; w < this.tile.x; w++) {\r\n                    let palindex = this.tile.pixels[h + w * this.tile.y];\r\n                    let color = this.palette.palette[palindex];\r\n                    pixels[4 * counter + 0] = color.r;\r\n                    pixels[4 * counter + 1] = color.g;\r\n                    pixels[4 * counter + 2] = color.b;\r\n                    pixels[4 * counter + 3] = color.a;\r\n                    counter++;\r\n                }\r\n            }\r\n            this.texture = new DataTexture(pixels, this.tile.x, this.tile.y, RGBAFormat);\r\n            this.texture.wrapS = RepeatWrapping;\r\n            this.texture.wrapT = RepeatWrapping;\r\n        }\r\n\r\n        let max = Math.max(this.tile.x, this.tile.y);\r\n        let tex = this.texture.clone();\r\n        let repeatx = xrepeat * (xflip ? -1 : +1);\r\n        let repeaty = yrepeat * (yflip ? +1 : -1);\r\n        tex.repeat.set(8 * repeatx / max, 8 * repeaty / max);\r\n        tex.needsUpdate = true;\r\n\r\n        return tex;\r\n    }\r\n}","import { FileBase } from \"./FileBase\";\r\nimport { BufferReader } from \"./BufferReader\";\r\nimport { FileCon } from \"./FileCon\";\r\nimport { FileB800 } from \"./FileB800\";\r\nimport { FileDat } from \"./FileDat\";\r\nimport { FileArt } from \"./FileArt\";\r\nimport { FileVoc } from \"./FileVoc\";\r\nimport { FileMid } from \"./FileMid\";\r\nimport { FileMap } from \"./FileMap\";\r\nimport { Texture } from \"../maprenderer/Texture\";\r\n\r\nexport class GrpProcessor {\r\n\r\n    files: Array<FileBase> = [];\r\n    palette: FileDat;\r\n    fileByName: Map<string, FileBase>;\r\n\r\n    read(buffer: ArrayBuffer) {\r\n        let length = buffer.byteLength;\r\n        console.log(\"File length: \" + length);\r\n\r\n        let reader = new BufferReader(buffer);\r\n        let sig = reader.readString(12);\r\n\r\n        if (sig !== \"KenSilverman\") {\r\n            throw new Error(\"Wrong grp signature. Found : \" + sig);\r\n        }\r\n\r\n        this.fileByName = new Map();\r\n        let fileCount = reader.readUint32LE();\r\n        let offset = reader.offset;\r\n        offset += 16 * fileCount;\r\n\r\n        for (let f = 0; f < fileCount; f++) {\r\n            let filename = reader.readString(12);\r\n            let filesize = reader.readUint32LE();\r\n            filename = filename.toLowerCase();\r\n\r\n            let idx = filename.indexOf('.');\r\n            let ext = filename.substr(idx + 1, 3);\r\n            filename = filename.substr(0, idx + 4);\r\n\r\n            let file: FileBase;\r\n            if (ext === \"con\") {\r\n                file = new FileCon(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n            } else if (ext === \"bin\") {\r\n                file = new FileB800(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n            } else if (ext === \"dat\") {\r\n                file = new FileDat(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n                if (filename === \"palette.dat\") {\r\n                    this.palette = file as FileDat;\r\n                }\r\n            } else if (ext === \"art\") {\r\n                file = new FileArt(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n            } else if (ext === \"voc\") {\r\n                file = new FileVoc(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n            } else if (ext === \"mid\") {\r\n                file = new FileMid(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n            } else if (ext === \"map\") {\r\n                file = new FileMap(reader, filename, filesize, offset);\r\n                this.files.push(file);\r\n            } else {\r\n                file = new FileBase(reader, filename, filesize, offset);\r\n                console.log(filename + \", \" + filesize);\r\n            }\r\n\r\n            offset += filesize;\r\n        }\r\n\r\n\r\n        for (let f = 0; f < this.files.length; f++) {\r\n            let file = this.files[f];\r\n            file.read();\r\n            this.fileByName.set(file.name, file);\r\n        }\r\n\r\n        let idx = 0;\r\n        let arts = this.getFiles(\"art\");\r\n        for (let i = 0; i < arts.length; i++) {\r\n            let tiles = (arts[i] as FileArt).tiles;\r\n            for (let j = 0; j < tiles.length; j++) {\r\n                let t = tiles[j];\r\n                this.allTexture.push(new Texture(t, this.palette, idx));\r\n                idx++;\r\n            }\r\n        }\r\n    }\r\n\r\n    addMap(buffer: ArrayBuffer, name: string) {\r\n        let reader = new BufferReader(buffer);\r\n        let file = new FileMap(reader, name, buffer.byteLength, 0);\r\n        file.read();\r\n        this.files.push(file);\r\n        this.fileByName.set(file.name, file);\r\n    }\r\n\r\n    getFiles(extension: string): Array<FileBase> {\r\n        let found: Array<FileBase> = [];\r\n        this.files.forEach(f => {\r\n            if (extension === \"con\" && f instanceof FileCon) {\r\n                found.push(f);\r\n            } else if (extension === \"bin\" && f instanceof FileB800) {\r\n                found.push(f);\r\n            } else if (extension === \"dat\" && f instanceof FileDat) {\r\n                found.push(f);\r\n            } else if (extension === \"art\" && f instanceof FileArt) {\r\n                found.push(f);\r\n            } else if (extension === \"voc\" && f instanceof FileVoc) {\r\n                found.push(f);\r\n            } else if (extension === \"mid\" && f instanceof FileMid) {\r\n                found.push(f);\r\n            } else if (extension === \"map\" && f instanceof FileMap) {\r\n                found.push(f);\r\n            }\r\n        });\r\n        return found;\r\n    }\r\n\r\n    getFile(name: string) {\r\n        return this.fileByName.get(name);\r\n    }\r\n\r\n\r\n    private allTexture: Array<Texture> = [];\r\n\r\n    getTexture(id: number) {\r\n        if (id >= this.allTexture.length) {\r\n            console.error(\"texture not found #\" + id);\r\n            return null;\r\n        }\r\n        return this.allTexture[id];\r\n    }\r\n}","import { useContext, useEffect, useRef } from \"react\";\r\nimport { useFileContext } from \"../Contexts\";\r\nimport { FileArt } from \"../data/FileArt\";\r\nimport { FileB800 } from \"../data/FileB800\";\r\nimport { FileCon } from \"../data/FileCon\";\r\nimport { FileMid } from \"../data/FileMid\";\r\nimport { FileVoc } from \"../data/FileVoc\";\r\nimport { Tile } from \"../data/Types\";\r\nimport { getGrpProcessor } from \"../Services\";\r\nimport WebAudioTinySynth from \"webaudio-tinysynth\";\r\n\r\ntype RenderTileProps = {\r\n    tile: Tile,\r\n}\r\nfunction RenderTile({ tile }: RenderTileProps) {\r\n\r\n    const canvasRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n\r\n        if (!tile.valid) return;\r\n\r\n        let processor = getGrpProcessor();\r\n        let pixels = new Uint8ClampedArray(tile.pixels.length * 4);\r\n        let counter = 0;\r\n        for (let h = 0; h < tile.y; h++) {\r\n            for (let w = 0; w < tile.x; w++) {\r\n                let palindex = tile.pixels[h + w * tile.y];\r\n                let color = processor.palette.palette[palindex];\r\n                pixels[4 * counter + 0] = color.r;\r\n                pixels[4 * counter + 1] = color.g;\r\n                pixels[4 * counter + 2] = color.b;\r\n                pixels[4 * counter + 3] = color.a;\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        let imageData = new ImageData(pixels, tile.x);\r\n        let canvas = canvasRef.current;\r\n        canvas.width = tile.x;\r\n        canvas.height = tile.y;\r\n        let ctx = canvas.getContext('2d');\r\n        ctx.putImageData(imageData, 0, 0);\r\n    });\r\n\r\n    if (!tile.valid) {\r\n        return <div></div>\r\n    }\r\n\r\n    return <div><canvas className=\"tile\" ref={canvasRef} /></div>\r\n}\r\n\r\nexport function Art() {\r\n    let { file } = useFileContext();\r\n    let processor = getGrpProcessor();\r\n    let base = processor.getFile(file.name) as FileArt;\r\n\r\n\r\n    return <div className=\"content\">\r\n        {base.tiles.map((v, idx) => {\r\n            return <RenderTile key={idx} tile={v} />\r\n        })}\r\n    </div>\r\n}\r\n\r\n\r\nlet b800color = [\"#000000\", \"#0000AA\", \"#00AA00\", \"#00AAAA\", \"#AA0000\", \"#AA00AA\", \"#AA5500\", \"#AAAAAA\",\r\n    \"#555555\", \"#5555FF\", \"#55FF55\", \"#55FFFF\", \"#FF5555\", \"#FF55FF\", \"#FFFF55\", \"#FFFFFF\"]\r\n\r\nfunction getB800Element(idx: number, char: string, colorData: number) {\r\n    let c = \"#000000\";\r\n    let bc = \"#FFFFFF\";\r\n    let color = colorData & 0x0F;\r\n    let bgcolor = (colorData & 0xF0) >> 4;\r\n    if (color < 16) c = b800color[color];\r\n    if (bgcolor < 16) bc = b800color[bgcolor];\r\n    return <span key={idx} style={{ \"color\": c, \"backgroundColor\": bc }}>{char}</span>\r\n}\r\n\r\nexport function B800() {\r\n    let { file } = useFileContext();\r\n    let processor = getGrpProcessor();\r\n    let base = processor.getFile(file.name) as FileB800;\r\n\r\n    if (base.chars.length != 2000) {\r\n        return <div>File is not 2000 char long</div>\r\n    }\r\n\r\n    let lines: Array<JSX.Element> = [];\r\n    for (let r = 0; r < 25; r++) {\r\n        let items: Array<JSX.Element> = [];\r\n        for (let c = 0; c < 80; c++) {\r\n            let idx = r * 80 + c;\r\n            let char = base.chars[idx];\r\n            let col = base.colors[idx];\r\n            let e = getB800Element(idx, char, col);\r\n            items.push(e);\r\n        }\r\n        let line = <div className=\"line\">\r\n            {items}\r\n        </div>;\r\n        lines.push(line)\r\n    }\r\n\r\n    return <div className=\"content\">\r\n        <div className=\"B800\">\r\n            {lines}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport function Con() {\r\n\r\n    const style = {\r\n        whiteSpace: 'pre'\r\n    };\r\n\r\n    let { file } = useFileContext();\r\n\r\n    let processor = getGrpProcessor();\r\n    let base = processor.getFile(file.name) as FileCon;\r\n\r\n    return <div className=\"content\" >\r\n        <code style={{ whiteSpace: 'pre' }}>{base.data}</code>\r\n    </div>\r\n}\r\n\r\n\r\ntype DownloadButtonProps = {\r\n    data: ArrayBuffer,\r\n    type: string,\r\n    name: string,\r\n}\r\nexport function DownloadButton({ data, type, name }: DownloadButtonProps) {\r\n    const elementRef = useRef<HTMLAnchorElement>();\r\n    useEffect(() => {\r\n        let blob = new Blob([data], { type: type });\r\n        elementRef.current.href = window.URL.createObjectURL(blob);\r\n        (elementRef.current as any).download = name;\r\n    });\r\n    return <a ref={elementRef}>\r\n        Download\r\n    </a>;\r\n}\r\n\r\nexport function Voc() {\r\n    let { file } = useFileContext();\r\n\r\n    let processor = getGrpProcessor();\r\n    let base = processor.getFile(file.name) as FileVoc;\r\n\r\n    return <div className=\"content\">\r\n        <div>\r\n            {base.name}\r\n        </div>\r\n        <DownloadButton type=\"audio/voc\" name={base.name} data={base.data} />\r\n    </div>\r\n}\r\n\r\nexport function Mid() {\r\n    let { file } = useFileContext();\r\n\r\n    let processor = getGrpProcessor();\r\n    let base = processor.getFile(file.name) as FileMid;\r\n\r\n    let synth: any;\r\n    let playing = false;\r\n\r\n    function play() {\r\n        if (!playing) {\r\n            synth = new WebAudioTinySynth();\r\n            synth.loadMIDI(base.data);\r\n            synth.playMIDI();\r\n            playing = true;\r\n        } else {\r\n            synth.stopMIDI();\r\n            playing = false;\r\n        }\r\n\r\n    }\r\n\r\n    return <div className=\"content\">\r\n        <div>\r\n            {base.name}\r\n        </div>\r\n        <div>\r\n            <DownloadButton type=\"audio/mid\" name={base.name} data={base.data} />\r\n        </div>\r\n        <div onClick={() => {\r\n            play();\r\n        }}>\r\n            Play/Pause\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","\r\nimport { PerspectiveCamera, Scene, Color, Fog, WebGLRenderer, HemisphereLight, DirectionalLight, Material, MeshLambertMaterial, BufferGeometry, Float32BufferAttribute, Mesh, DoubleSide, Vector3, BoxBufferGeometry, AmbientLight, MeshBasicMaterial, BufferAttribute, Shape, ShapeBufferGeometry, Object3D, TextureLoader, RepeatWrapping, LineSegments, LineBasicMaterial, AxesHelper, Vector2, MathUtils } from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLOBALSCALE } from '../../Constants';\r\n\r\nimport { Map, Sector, Wall } from \"../../data/FileMap\";\r\nimport { GrpProcessor } from '../../data/GrpProcessor';\r\n\r\nlet a = new Vector3();\r\nlet b = new Vector3();\r\nlet c = new Vector3();\r\nlet d = new Vector3();\r\nlet planey = new Vector3();\r\nlet planex = new Vector3();\r\nlet v0 = new Vector2();\r\nlet v1 = new Vector2();\r\nlet v2 = new Vector2();\r\nlet v3 = new Vector2();\r\n\r\n\r\nexport class Map3dRenderer {\r\n\r\n    private camera: PerspectiveCamera;\r\n    private scene: Scene;\r\n    private renderer: WebGLRenderer;\r\n    private useTexture = false;\r\n\r\n    private defaultWallMaterial: Material;\r\n    private defaultFloorMaterial: Material;\r\n    private defaultCeilMaterial: Material;\r\n    private orbitControls: OrbitControls;\r\n    private root = new Object3D();\r\n\r\n    private lines: Array<Vector3> = [];\r\n    private initialized = false;\r\n\r\n    private keydowns = {\r\n        \"left\": false,\r\n        \"right\": false,\r\n        \"up\": false,\r\n        \"down\": false,\r\n    }\r\n\r\n    constructor(private canvas: HTMLCanvasElement, private map: Map, private processor: GrpProcessor) {\r\n    }\r\n\r\n    initialize(useTexture = false) {\r\n\r\n        this.useTexture = useTexture;\r\n\r\n        if (!this.initialized) {\r\n            this.initialized = true;\r\n\r\n            this.camera = new PerspectiveCamera(45, this.canvas.width / this.canvas.height, 1, 100000);\r\n            this.camera.position.set(100, 200, 300);\r\n\r\n            this.scene = new Scene();\r\n            this.scene.background = new Color(0x151515);\r\n            this.scene.add(this.root);\r\n\r\n            this.root.updateMatrixWorld();\r\n\r\n            // renderer\r\n            this.renderer = new WebGLRenderer({ antialias: true, canvas: this.canvas });\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(this.canvas.width, this.canvas.height);\r\n\r\n            // controls\r\n            this.orbitControls = new OrbitControls(this.camera, this.canvas);\r\n\r\n            // lights\r\n            const hemiLight = new AmbientLight(0xffffff, 0.7);\r\n            this.scene.add(hemiLight);\r\n\r\n            const dirLight = new DirectionalLight(0xffffff, 1);\r\n            dirLight.position.set(0.1, 1, 0.2);\r\n            this.scene.add(dirLight);\r\n\r\n            let opacity = 0.8;\r\n            this.defaultWallMaterial = new MeshLambertMaterial({ color: 0xfbff00, transparent: true, opacity: opacity });\r\n            this.defaultFloorMaterial = new MeshLambertMaterial({ color: 0xfbff00, transparent: true, opacity: opacity });\r\n            this.defaultCeilMaterial = new MeshLambertMaterial({ color: 0xfbff00, transparent: true, opacity: opacity });\r\n\r\n            document.addEventListener(\"keydown\", (ev: KeyboardEvent) => this.onKeyDown(ev));\r\n            document.addEventListener(\"keyup\", (ev: KeyboardEvent) => this.onKeyUp(ev));\r\n\r\n            this.renderPlayer();\r\n            \r\n        } else {\r\n\r\n            // clear walls before rebuild\r\n            this.lines = [];\r\n            this.root.clear();\r\n\r\n        }\r\n\r\n        this.renderWalls();\r\n    }\r\n\r\n    render(dt: number) {\r\n\r\n        let forward = 0;\r\n        let side = 0;\r\n        if (this.keydowns.up) forward = 1;\r\n        if (this.keydowns.down) forward = -1;\r\n        if (this.keydowns.left) side = 1;\r\n        if (this.keydowns.right) side = -1;\r\n        if (forward != 0) {\r\n            let direction = this.camera.getWorldDirection(a);\r\n            direction.multiplyScalar(forward * dt * 5);\r\n            this.camera.position.add(direction);\r\n            this.orbitControls.target.add(direction);\r\n        }\r\n        if (side != 0) {\r\n            let d = this.camera.getWorldDirection(a);\r\n            let up = b.set(0, 1, 0).transformDirection(this.camera.matrixWorld);\r\n            let length = c.copy(this.orbitControls.target).sub(this.camera.position).length();\r\n            d.applyAxisAngle(up, side * dt * 2);\r\n            d.multiplyScalar(length);\r\n\r\n            this.orbitControls.target.copy(this.camera.position).add(d);\r\n            this.orbitControls.update();\r\n        }\r\n\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n\r\n    resize(w: number, h: number) {\r\n        this.camera.aspect = w / h;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(w, h);\r\n    }\r\n\r\n    switchTexturing() {\r\n        this.initialize(!this.useTexture);\r\n    }\r\n\r\n    private renderWalls() {\r\n\r\n        let sectorstart = 0;\r\n\r\n        for (let j = sectorstart; j < this.map.sectors.length; j++) {\r\n\r\n            let sector = this.map.sectors[j];\r\n\r\n            for (let i = 0; i < sector.wallnum; i++) {\r\n                let wall = this.map.walls[sector.wallptr + i];\r\n                let next = this.map.walls[wall.point2];\r\n                this.renderWall(sector, wall, next);\r\n            }\r\n\r\n            if (sector.floorz != sector.ceilingz) {\r\n                this.renderFloorAndCeiling(sector);\r\n            }\r\n        }\r\n\r\n        if (!this.useTexture) {\r\n            // wireframe\r\n            let vertices: Array<number> = [];\r\n            this.lines.forEach(p => {\r\n                vertices.push(p.x); vertices.push(p.y); vertices.push(p.z);\r\n            });\r\n            let wireGeometry = new BufferGeometry();\r\n            wireGeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n            let segments = new LineSegments(wireGeometry, new LineBasicMaterial({ color: 0x000000 }));\r\n            this.root.add(segments);\r\n        }\r\n    }\r\n\r\n    private getWallMaterial(wall: Wall) {\r\n        if (!this.useTexture) return this.defaultWallMaterial;\r\n\r\n        let texture = this.processor.getTexture(wall.picnum);\r\n        let tex = texture.getTexture(wall.xrepeat, wall.yrepeat, wall.xpanning, wall.ypanning, wall.stat.xflip, wall.stat.yflip);\r\n\r\n        let material = new MeshBasicMaterial({ map: tex, transparent: true });\r\n        return material;\r\n    }\r\n    private getCeilingMaterial(sector: Sector) {\r\n        if (!this.useTexture) return this.defaultCeilMaterial;\r\n\r\n        let texture = this.processor.getTexture(sector.ceilingpicnum);\r\n        let tex = texture.getTexture(16, 16, sector.ceilingxpanning, sector.ceilingypanning, sector.cstat.xflip, sector.cstat.yflip);\r\n        let material = new MeshBasicMaterial({ map: tex, transparent: true });\r\n        return material;\r\n    }\r\n    private getFloorMaterial(sector: Sector) {\r\n        if (!this.useTexture) return this.defaultFloorMaterial;\r\n\r\n        let texture = this.processor.getTexture(sector.floorpicnum);\r\n        let tex = texture.getTexture(16, 16, sector.floorxpanning, sector.floorypanning, sector.fstat.xflip, sector.fstat.yflip);\r\n        let material = new MeshBasicMaterial({ map: tex, transparent: true });\r\n        return material;\r\n    }\r\n\r\n    private renderWall(sector: Sector, wall: Wall, next: Wall) {\r\n        let nextSector = wall.nextsector != -1 ? this.map.sectors[wall.nextsector] : null;\r\n\r\n        if (sector.floorz == sector.ceilingz) return;\r\n\r\n        if (nextSector == null) {\r\n\r\n            a.set(wall.x, this.getSlopeZ(sector, 1, wall.x, wall.y), wall.y);\r\n            b.set(wall.x, this.getSlopeZ(sector, 0, wall.x, wall.y), wall.y);\r\n            c.set(next.x, this.getSlopeZ(sector, 0, next.x, next.y), next.y);\r\n            d.set(next.x, this.getSlopeZ(sector, 1, next.x, next.y), next.y);\r\n\r\n            let geometry = this.newQuad(a, b, c, d);\r\n            let mesh = new Mesh(geometry, this.getWallMaterial(wall));\r\n            this.root.add(mesh);\r\n\r\n        } else {\r\n            if (sector.floorz < nextSector.floorz) {\r\n                a.set(wall.x, this.getSlopeZ(sector, 1, wall.x, wall.y), wall.y);\r\n                b.set(wall.x, this.getSlopeZ(nextSector, 1, wall.x, wall.y), wall.y);\r\n                c.set(next.x, this.getSlopeZ(nextSector, 1, next.x, next.y), next.y);\r\n                d.set(next.x, this.getSlopeZ(sector, 1, next.x, next.y), next.y);\r\n\r\n                let geometry = this.newQuad(a, b, c, d);\r\n                let mesh = new Mesh(geometry, this.getWallMaterial(wall));\r\n                this.root.add(mesh);\r\n            }\r\n            if (sector.ceilingz > nextSector.ceilingz) {\r\n                a.set(wall.x, this.getSlopeZ(nextSector, 0, wall.x, wall.y), wall.y);\r\n                b.set(wall.x, this.getSlopeZ(sector, 0, wall.x, wall.y), wall.y);\r\n                c.set(next.x, this.getSlopeZ(sector, 0, next.x, next.y), next.y);\r\n                d.set(next.x, this.getSlopeZ(nextSector, 0, next.x, next.y), next.y);\r\n\r\n                let geometry = this.newQuad(a, b, c, d);\r\n                let mesh = new Mesh(geometry, this.getWallMaterial(wall));\r\n                this.root.add(mesh);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private renderPlayer() {\r\n        let sector = this.map.sectors[this.map.currentSector];\r\n\r\n        a.set(this.map.startX, sector.floorz + 1, this.map.startY);\r\n\r\n        let angle = 270 - 360 * MathUtils.inverseLerp(0, 2048, this.map.startAngle);\r\n        b.set(0, 0, -5).applyAxisAngle(c.set(0, 1, 0), angle * MathUtils.DEG2RAD);\r\n\r\n        this.camera.position.copy(a);\r\n        this.orbitControls.target.copy(a).add(b);\r\n        this.orbitControls.saveState();\r\n        this.orbitControls.update();\r\n\r\n        (window as any)._orbit = this.orbitControls;\r\n    }\r\n\r\n    private renderFloorAndCeiling(sector: Sector) {\r\n        let wallptr = sector.wallptr;\r\n        let shape = new Shape();\r\n        let w0 = this.map.walls[wallptr];\r\n        shape.moveTo(w0.x, w0.y);\r\n        for (let i = 0; i < sector.wallnum; i++) {\r\n            let wall = this.map.walls[wallptr];\r\n            wallptr = wall.point2;\r\n            let next = this.map.walls[wallptr];\r\n            shape.lineTo(next.x, next.y);\r\n        }\r\n\r\n        let ceilGeometry = new ShapeBufferGeometry(shape);\r\n\r\n        // align uv to first wall\r\n        let uv = ceilGeometry.getAttribute(\"uv\");\r\n        let p0 = v0.set(uv.getX(0), uv.getY(0));\r\n        let p1 = v1.set(uv.getX(1), uv.getY(1));\r\n        let angle = -v2.copy(p1).sub(p0).normalize().angle();\r\n        let sin = Math.sin(angle);\r\n        let cos = Math.cos(angle);\r\n        for (let i = 0; i < uv.count; i++) {\r\n            v3.set(uv.getX(i), uv.getY(i));\r\n            v3.sub(p0);\r\n            let newx = v3.x * cos - v3.y * sin;\r\n            let newy = v3.x * sin + v3.y * cos;\r\n            uv.setX(i, newx);\r\n            uv.setY(i, newy);\r\n        }\r\n\r\n        let floorGeometry = ceilGeometry.clone();\r\n\r\n        let cpositions = ceilGeometry.getAttribute(\"position\");\r\n        for (let i = 0; i < cpositions.count; i++) {\r\n            let x = cpositions.getX(i);\r\n            let y = cpositions.getY(i);\r\n            let z = this.getSlopeZ(sector, 0, x, y)\r\n            cpositions.setY(i, z);\r\n            cpositions.setZ(i, y);\r\n        }\r\n\r\n        let fpositions = floorGeometry.getAttribute(\"position\");\r\n        for (let i = 0; i < fpositions.count; i++) {\r\n            let x = fpositions.getX(i);\r\n            let y = fpositions.getY(i);\r\n            let z = this.getSlopeZ(sector, 1, x, y)\r\n            fpositions.setY(i, z);\r\n            fpositions.setZ(i, y);\r\n        }\r\n        let floorindex = floorGeometry.index;\r\n        for (let i = 0; i < floorindex.count; i = i + 3) {\r\n            let b = floorindex.getY(i);\r\n            let c = floorindex.getZ(i);\r\n            floorindex.setY(i, c);\r\n            floorindex.setZ(i, b);\r\n        }\r\n\r\n        let floor = new Mesh(floorGeometry, this.getFloorMaterial(sector));\r\n        let ceiling = new Mesh(ceilGeometry, this.getCeilingMaterial(sector));\r\n\r\n        this.root.add(floor);\r\n        this.root.add(ceiling);\r\n    }\r\n\r\n\r\n    private newQuad(a: Vector3, b: Vector3, c: Vector3, d: Vector3) {\r\n        const geometry = new BufferGeometry();\r\n        const indices: Array<number> = [];\r\n        const vertices: Array<number> = [];\r\n        const uvs: Array<number> = [];\r\n        const normals: Array<number> = [];\r\n\r\n\r\n        let dir1 = planey.copy(b).sub(a);\r\n        let dir2 = planex.copy(d).sub(a);\r\n        let normal = new Vector3().crossVectors(dir1, dir2).normalize();\r\n\r\n        vertices.push(a.x, a.y, a.z);\r\n        vertices.push(b.x, b.y, b.z);\r\n        vertices.push(c.x, c.y, c.z);\r\n        vertices.push(d.x, d.y, d.z);\r\n\r\n        let dir1l = dir1.length();\r\n        let dir1l2 = planey.copy(d).sub(c).length();\r\n\r\n        uvs.push(0, 0);\r\n        uvs.push(0, (0 + dir1l));\r\n        uvs.push(1, (0 + dir1l2));\r\n        uvs.push(1, 0);\r\n\r\n        normals.push(normal.x, normal.y, normal.z);\r\n        normals.push(normal.x, normal.y, normal.z);\r\n        normals.push(normal.x, normal.y, normal.z);\r\n        normals.push(normal.x, normal.y, normal.z);\r\n\r\n        indices.push(0, 3, 1);\r\n        indices.push(1, 3, 2);\r\n\r\n        geometry.setIndex(indices);\r\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n        geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n\r\n\r\n        if (!this.useTexture) {\r\n            this.lines.push(a.clone()); this.lines.push(b.clone());\r\n            this.lines.push(b.clone()); this.lines.push(c.clone());\r\n            this.lines.push(c.clone()); this.lines.push(d.clone());\r\n            this.lines.push(d.clone()); this.lines.push(a.clone());\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    private getSlopeZ(sector: Sector, floor: number, x: number, y: number) {\r\n        let wall = this.map.walls[sector.wallptr];\r\n        let v = (wall.x - x) * sector.grad[floor].x + (wall.y - y) * sector.grad[floor].y + sector.z[floor];\r\n        return v;\r\n    }\r\n\r\n    private onKeyDown(e: KeyboardEvent) {\r\n        if (e.key == \"ArrowUp\") this.keydowns.up = true;\r\n        if (e.key == \"ArrowDown\") this.keydowns.down = true;\r\n        if (e.key == \"ArrowLeft\") this.keydowns.left = true;\r\n        if (e.key == \"ArrowRight\") this.keydowns.right = true;\r\n    }\r\n\r\n    private onKeyUp(e: KeyboardEvent) {\r\n        if (e.key == \"ArrowUp\") this.keydowns.up = false;\r\n        if (e.key == \"ArrowDown\") this.keydowns.down = false;\r\n        if (e.key == \"ArrowLeft\") this.keydowns.left = false;\r\n        if (e.key == \"ArrowRight\") this.keydowns.right = false;\r\n    }\r\n}","import { Map } from \"../data/FileMap\";\r\nimport { GrpProcessor } from \"../data/GrpProcessor\";\r\nimport { Map2dRenderer } from \"./2d/Map2dRenderer\";\r\nimport { Map3dRenderer } from \"./3d/Map3dRenderer\";\r\n\r\n\r\nexport class MapRenderer {\r\n\r\n    destroyed = false;\r\n\r\n    root: HTMLElement;\r\n    canvas: Array<HTMLCanvasElement> = [];\r\n    resizeObserver: ResizeObserver;\r\n\r\n    renderer2d: Map2dRenderer;\r\n    renderer3d: Map3dRenderer;\r\n\r\n    private canvas2dActive = true;\r\n    private oldTime = 0;\r\n\r\n    destroy() {\r\n        this.destroyed = true;\r\n\r\n        this.resizeObserver.unobserve(this.root)\r\n    }\r\n\r\n    initialize(content: HTMLElement, map: Map, processor: GrpProcessor) {\r\n        this.root = content;\r\n\r\n        let canvass = content.getElementsByTagName(\"canvas\");\r\n        let canvas3d = canvass.item(0);\r\n        let canvas2d = canvass.item(1);\r\n        this.canvas.push(canvas3d);\r\n        this.canvas.push(canvas2d);\r\n\r\n        this.onresize();\r\n\r\n        this.resizeObserver = new ResizeObserver((entries) => {\r\n            this.onresize();\r\n        });\r\n\r\n        this.resizeObserver.observe(this.root);\r\n\r\n\r\n        this.setCanvas2dVisible(false);\r\n        this.renderer2d = new Map2dRenderer(canvas2d, map, processor);\r\n        this.renderer3d = new Map3dRenderer(canvas3d, map, processor);\r\n        this.renderer3d.initialize();\r\n\r\n\r\n        this.oldTime = now();\r\n        this.render();\r\n    }\r\n\r\n    onresize() {\r\n        let size = this.root.getBoundingClientRect();\r\n        this.resizeCanvas(this.canvas[0], size.width, size.height);\r\n        this.resizeCanvas(this.canvas[1], size.width, size.height);\r\n\r\n        if (this.renderer3d != null) this.renderer3d.resize(size.width, size.height);\r\n    }\r\n\r\n    private resizeCanvas(c: HTMLCanvasElement, width: number, height: number) {\r\n        c.width = width * devicePixelRatio;\r\n        c.height = height * devicePixelRatio;\r\n        c.style.width = width + \"px\";\r\n        c.style.height = height + \"px\";\r\n    }\r\n\r\n    render() {\r\n        if (this.destroyed) return;\r\n\r\n        requestAnimationFrame(() => this.render());\r\n\r\n        let n = now();\r\n        let ellapsed = n - this.oldTime;\r\n        this.oldTime = n;\r\n\r\n        if (this.renderer2d != null && this.canvas2dActive) this.renderer2d.render(ellapsed / 1000);\r\n        if (this.renderer3d != null && !this.canvas2dActive) this.renderer3d.render(ellapsed / 1000);\r\n    }\r\n\r\n    setCanvas2dVisible(visible: boolean) {\r\n        if (visible == this.canvas2dActive) return;\r\n\r\n        this.canvas2dActive = visible;\r\n        this.canvas[0].style.display = (visible ? \"none\" : \"block\");\r\n        this.canvas[1].style.display = (visible ? \"block\" : \"none\");\r\n    }\r\n\r\n    switch2d3d() {\r\n        if (this.canvas2dActive) {\r\n            this.renderer3d.initialize();\r\n        } else {\r\n            this.renderer2d.initialize();\r\n        }\r\n        this.setCanvas2dVisible(!this.canvas2dActive);\r\n    }\r\n\r\n    switchTexturing() {\r\n        if(this.renderer3d != null) this.renderer3d.switchTexturing();\r\n    }\r\n}\r\n\r\nfunction now() {\r\n    return (typeof performance === 'undefined' ? Date : performance).now();\r\n}","import { useEffect, useLayoutEffect, useRef } from \"react\";\r\nimport { useFileContext } from \"../Contexts\";\r\nimport { FileMap } from \"../data/FileMap\";\r\nimport { FileMid } from \"../data/FileMid\";\r\nimport { MapRenderer } from \"../maprenderer/MapRenderer\";\r\nimport { getGrpProcessor } from \"../Services\";\r\nimport { DownloadButton } from \"./DataRenderer\";\r\n\r\n\r\nexport function MapViewControls() {\r\n\r\n    let { file } = useFileContext();\r\n\r\n    let processor = getGrpProcessor();\r\n    let fileMap = processor.getFile(file.name) as FileMap;\r\n\r\n    const rootRef = useRef<HTMLDivElement>()\r\n    const link2d3d = useRef<HTMLDivElement>()\r\n    const linkTexturing = useRef<HTMLDivElement>()\r\n    let is2dActive = false;\r\n    let isTextureActive = false;\r\n    let mapRenderer: MapRenderer;\r\n\r\n    function switch2d3d() {\r\n        is2dActive = !is2dActive;\r\n        let content = is2dActive ? \"[3D view]\" : \"[2D view]\";\r\n        link2d3d.current.innerText = content;\r\n        linkTexturing.current.style.display = (is2dActive ? \"none\" : \"block\");\r\n        mapRenderer.switch2d3d();\r\n    }\r\n\r\n    function switchTexturing() {\r\n        mapRenderer.switchTexturing();\r\n\r\n        isTextureActive = !isTextureActive;\r\n        let content = isTextureActive ? \"[Disable texture]\" : \"[Enable texture]\";\r\n        linkTexturing.current.innerText = content;\r\n    }\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        console.log(\"LOAD  MAP\");\r\n        fileMap.loadFull();\r\n\r\n        mapRenderer = new MapRenderer();\r\n        mapRenderer.initialize(rootRef.current, fileMap.map, processor);\r\n\r\n        return function cleanup() {\r\n            console.log(\"CLEANUP MAP\");\r\n            mapRenderer.destroy();\r\n        }\r\n    });\r\n\r\n    return <div ref={rootRef} className=\"content\">\r\n        <div className=\"map\">\r\n            <div className=\"mapheader\" >\r\n                <div className=\"title\" >\r\n                    {fileMap.name}[{fileMap.size / 1000} kB]\r\n                </div>\r\n                <div>\r\n                    <DownloadButton type=\"file/map\" name={fileMap.name} data={fileMap.rawData} />\r\n                </div>\r\n                <div ref={linkTexturing} className=\"texturing\" onClick={() => switchTexturing()}>\r\n                    [Enable texture]\r\n                </div>\r\n                <div ref={link2d3d} className=\"view2d3d\" onClick={() => switch2d3d()}>\r\n                    [2D view]\r\n                </div>\r\n            </div>\r\n            <canvas id=\"c3d\"></canvas>\r\n            <canvas id=\"c2d\"></canvas>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import { useFileContext } from \"../Contexts\"\r\nimport { Art, B800, Con, Mid, Voc } from \"./DataRenderer\";\r\nimport { MapViewControls } from \"./MapViewControls\";\r\n\r\nexport function Content() {\r\n\r\n    const { file } = useFileContext();\r\n\r\n    if (file.name === \"\" || file.name === \"-none-\")\r\n        return <div className=\"content\">\r\n            -- Select file\r\n        </div>\r\n\r\n    if (file.ext === \"art\") return <Art />\r\n    if (file.ext === \"bin\") return <B800 />\r\n    if (file.ext === \"con\") return <Con />\r\n    if (file.ext === \"mid\") return <Mid />\r\n    if (file.ext === \"voc\") return <Voc />\r\n    if (file.ext === \"map\") return <MapViewControls />\r\n\r\n    return <div className=\"content\">\r\n        {file.name}\r\n    </div>\r\n}\r\n\r\n\r\n// import { App } from \"../App\";\r\n// import { FileArt } from \"../data/FileArt\";\r\n// import { FileB800 } from \"../data/FileB800\";\r\n// import { FileBase } from \"../data/FileBase\";\r\n// import { FileCon } from \"../data/FileCon\";\r\n// import { FileMap } from \"../data/FileMap\";\r\n// import { FileMid } from \"../data/FileMid\";\r\n// import { FileVoc } from \"../data/FileVoc\";\r\n// import { GrpProcessor } from \"../data/GrpProcessor\";\r\n// import { MapRenderer } from \"../maprenderer/MapRenderer\";\r\n// import { Component } from \"./Component\";\r\n// import { renderArt, renderB800, renderMid, renderVoc } from \"./DataRenderer\";\r\n// import { MapViewControls } from \"./MapViewControls\";\r\n\r\n// export class Content extends Component<HTMLDivElement> {\r\n\r\n\r\n//     private mapRenderer: MapRenderer;\r\n\r\n//     constructor(public app: App) {\r\n//         super();\r\n//     }\r\n\r\n//     build() {\r\n//         return <div className=\"content\">\r\n//             -- Select file\r\n//         </div>\r\n//     }\r\n\r\n//     showError(e: any) {\r\n//         let msg = <div className=\"content\">\r\n//             <div className=\"error\">\r\n//                 {e.message}\r\n//             </div>\r\n//         </div>\r\n\r\n//         this.replaceElement(msg);\r\n//     }\r\n\r\n//     display(file: FileBase, processor: GrpProcessor) {\r\n//         if (this.mapRenderer != null) {\r\n//             this.mapRenderer.destroy();\r\n//             this.mapRenderer = null;\r\n//         }\r\n\r\n//         let title = <div className=\"title\">\r\n//             {file.name} [{file.size / 1000} kB]\r\n//         </div>\r\n\r\n//         let view: HTMLElement;\r\n//         let filetype = \"\";\r\n//         if (file instanceof FileCon) {\r\n//             filetype = \"con\";\r\n//             view = <code style=\"white-space: pre\">{file.data}</code>\r\n//         } else if (file instanceof FileB800) {\r\n//             filetype = \"b800\";\r\n//             view = renderB800(file);\r\n//         } else if (file instanceof FileMid) {\r\n//             filetype = \"mid\";\r\n//             view = renderMid(file);\r\n//         } else if (file instanceof FileVoc) {\r\n//             filetype = \"voc\";\r\n//             view = renderVoc(file);\r\n//         } else if (file instanceof FileMap) {\r\n//             filetype = \"map\";\r\n//             file.loadFull();\r\n//             this.mapRenderer = new MapRenderer();\r\n//             let mapControls = new MapViewControls(file, this.mapRenderer, processor);\r\n//             mapControls.render();\r\n//             view = mapControls.element;\r\n//             let e = <div className={\"content \" + filetype}>\r\n//                 {view}\r\n//             </div>\r\n//             this.replaceElement(e);\r\n//             mapControls.initialize();\r\n//             return;\r\n\r\n//         } else if (file instanceof FileArt) {\r\n//             filetype = \"art\";\r\n//             view = <div>\r\n//                 {\r\n//                     file.tiles.map((t, i) => {\r\n//                         return renderArt(t, processor);\r\n//                     })\r\n//                 }\r\n//             </div>\r\n//         }\r\n//         else {\r\n//             filetype = \"unknow\";\r\n//             view = <div>todo</div>\r\n//         }\r\n\r\n\r\n//         let e = <div className={\"content \" + filetype}>\r\n//             {title}\r\n//             {view}\r\n//         </div>\r\n\r\n//         this.replaceElement(e);\r\n\r\n//         if (this.mapRenderer != null) {\r\n//             this.mapRenderer.initialize(e, (file as FileMap).map, processor);\r\n//         }\r\n//     }\r\n\r\n// }","import { LoadingState, useLoadingContext } from \"../Contexts\";\r\n\r\nexport function DropZone() {\r\n\r\n    const { loadingState, setLoadingState } = useLoadingContext()!;\r\n\r\n    function stopEvent(e: React.DragEvent) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    function onDragEnter(e: React.DragEvent<HTMLElement>) {\r\n        stopEvent(e);\r\n        e.currentTarget.classList.add('highlight')\r\n    }\r\n    function onDragOver(e: React.DragEvent<HTMLElement>) {\r\n        stopEvent(e);\r\n        e.currentTarget.classList.add('highlight')\r\n    }\r\n    function onDragLeave(e: React.DragEvent<HTMLElement>) {\r\n        stopEvent(e);\r\n        e.currentTarget.classList.remove('highlight')\r\n    }\r\n    function onDragDrop(e: React.DragEvent<HTMLElement>) {\r\n        stopEvent(e);\r\n        e.currentTarget.classList.remove('highlight')\r\n\r\n        let dt = e.dataTransfer\r\n        let files = dt.files\r\n        handleFiles(files)\r\n    }\r\n\r\n    function handleFiles(files: FileList) {\r\n        setLoadingState(LoadingState.Loading);\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files.item(i);\r\n            console.log(\"received : \" + file.name);\r\n            file.arrayBuffer().then((b) => {\r\n                //this.app.onGrpLoaded(b);\r\n                setLoadingState(LoadingState.Loaded);\r\n            });\r\n            break;\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingState === LoadingState.Loading) {\r\n        return <div className=\"dropzone\" >Loading...</div>;\r\n    } else {\r\n        return <div className=\"dropzone drop-area\" onDragEnter={(e) => onDragEnter(e)} onDragOver={(e) => onDragOver(e)} onDragLeave={(e) => onDragLeave(e)} onDrop={(e) => onDragDrop(e)}>\r\n            <form>\r\n                <p>Upload GRP file with the file dialog or by dragging and dropping onto the dashed region</p>\r\n                <input type=\"file\" id=\"fileElem\" accept=\"*/*\" onChange={(e) => handleFiles(e.target.files)} />\r\n                <label className=\"button\" htmlFor=\"fileElem\">Select GRP</label>\r\n            </form>\r\n        </div>\r\n    }\r\n}","import { LoadingState, useLoadingContext } from \"../Contexts\";\r\nimport { initGrpProcessor } from \"../Services\";\r\nimport { DropZone } from \"./DropZone\";\r\n\r\nexport function Header() {\r\n\r\n    const { loadingState, setLoadingState } = useLoadingContext()!;\r\n\r\n    function loadGrp() {\r\n        if (loadingState === LoadingState.Loading) return;\r\n\r\n        setLoadingState(LoadingState.Loading);\r\n\r\n        fetch(process.env.PUBLIC_URL + \"/grp/demo.grp\").then((response) => {\r\n            return response.arrayBuffer();\r\n        }).then((buffer) => {\r\n            console.log(\"demo grp loaded\");\r\n            initGrpProcessor(buffer);\r\n        }).finally(() => {\r\n            setLoadingState(LoadingState.Loaded);\r\n        });\r\n    }\r\n\r\n    return <div className=\"header\">\r\n        <DropZone></DropZone>\r\n\r\n        <div className=\"loadzone\" onClick={() => loadGrp()}>\r\n            <div>\r\n                Or load the demo.grp by clicking here\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n","import { useState } from \"react\";\r\nimport { LoadingState, useFileContext, useLoadingContext } from \"../Contexts\";\r\nimport { FileBase } from \"../data/FileBase\";\r\nimport { getGrpProcessor } from \"../Services\";\r\n\r\n\r\ntype SectionProps = {\r\n    ext: string,\r\n}\r\nconst Section = ({ ext }: SectionProps) => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const { setFile } = useFileContext();\r\n\r\n    let processor = getGrpProcessor();\r\n    let files = processor.getFiles(ext);\r\n\r\n    function onFileSelected(file: FileBase) {\r\n        setFile({\r\n            name: file.name,\r\n            ext: ext\r\n        });\r\n    }\r\n\r\n    function toggle() {\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    return <div className=\"section\">\r\n        <div className=\"sectionHeader\" onClick={() => toggle()}>{ext} ({files.length})</div>\r\n        <div className={isOpen ? \"open\" : \"close\"}>\r\n            {files.map((f, i) => {\r\n                return <div key={i} className=\"file\" onClick={() => onFileSelected(f)}>\r\n                    {f.name}\r\n                </div>\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport function Sidebar() {\r\n\r\n    const { loadingState } = useLoadingContext()!;\r\n\r\n    function renderEmpty() {\r\n        return <div className=\"sidebar\">\r\n        </div>\r\n    }\r\n    function renderLoading() {\r\n        return <div className=\"sidebar\">\r\n            Loading files..\r\n        </div>\r\n    }\r\n\r\n    function renderLoaded() {\r\n        console.log(\"RENDER LOADED\");\r\n\r\n        return <div className=\"sidebar\">\r\n            <Section ext=\"art\" />\r\n            <Section ext=\"bin\" />\r\n            <Section ext=\"con\" />\r\n            <Section ext=\"map\" />\r\n            <Section ext=\"dat\" />\r\n            <Section ext=\"mid\" />\r\n            <Section ext=\"voc\" />\r\n        </div>\r\n    }\r\n\r\n    if (loadingState === LoadingState.Loaded) {\r\n        return renderLoaded();\r\n    } else if (loadingState === LoadingState.Loading) {\r\n        return renderLoading();\r\n    } else {\r\n        return renderEmpty();\r\n    }\r\n}\r\n","import React from 'react';\nimport { FileProvider, LoadingProvider } from './Contexts';\n\nimport './Style.scss';\n\nimport { Content } from './ui/Content';\nimport { Header } from './ui/Header';\nimport { Sidebar } from './ui/SideBar';\n\nexport function App() {\n\n\n\n  return (\n    <div className=\"app\">\n      <LoadingProvider>\n        <FileProvider>\n          <Header></Header>\n          <Sidebar></Sidebar>\n          <Content></Content>\n        </FileProvider>\n      </LoadingProvider>\n    </div>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}